#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define MAX 20
char stack1[MAX];
int top = -1;

void push(char c)
 {
    if (top == MAX - 1)
 {
       printf("Stack Overflow\n");
        exit(1);
    } 
else 
{
        stack1[++top] = c;
    }
}

char pop()
 {
    if (top == -1)
 {
        printf("Stack Underflow\n");
        exit(1);
    }
    return stack1[top--];
}

char peek()
 {
    if (top == -1)
 {
        return '\0'; 
    }
    return stack1[top];
}

int priority(char c)
 {
    switch (c) {
        case '+':
        case '-':
            return 1;
        case '*':
        case '/':
            return 2;
        case '^':
            return 3;
        default:
            return 0;
    }
}

int leftAssociativity(char c)
 {
    return (c == '+' || c == '-' || c == '*' || c == '/');
}

void infixToPostfix(char *infix, char *postfix)
 {
    int i = 0, j = 0;
    while (infix[i]) {
if ((infix[i] >= 'A' && infix[i] <= 'Z') || (infix[i] >= 'a' && 
infix[i] <= 'z') || (infix[i] >= '0' && infix[i] <= '9')) 
{
            postfix[j++] = infix[i]; // Add operand to postfix
        } 
else if (infix[i] == '(')
 {
            push(infix[i]);
        }
 else if (infix[i] == ')') 
{
            while (top != -1 && peek() != '(')
           {
                postfix[j++] = pop();
            }
            pop(); // Remove the '(' from the stack
   } 
else if (infix[i] == '+' || infix[i] == '-' || infix[i] == '*' ||
 infix[i] == '/' || infix[i] == '^')
         {
            while (top != -1 && (priority(peek()) > priority(infix[i]) || (priority(peek()) == priority(infix[i]) && leftAssociativity(infix[i]))))
 {
                postfix[j++] = pop();
            }
            push(infix[i]);
        }
        i++;
    }

    while (top != -1)
 {
        postfix[j++] = pop();
    }
    postfix[j] = '\0'; // Null-terminate the postfix expression
}

void reverse(char *exp) {
    int n = strlen(exp);
    for (int i = 0; i < n / 2; i++) {
        char temp = exp[i];
        exp[i] = exp[n - i - 1];
        exp[n - i - 1] = temp;
    }
}

void infixToPrefix(char *infix, char *prefix) 
{
    top = -1  ;
    reverse(infix);

    for (int i = 0; infix[i]; i++)
 {
        if (infix[i] == '(')
 {
            infix[i] = ')';
        } 

else if (infix[i] == ')')
 {
            infix[i] = '(';
      }
    }

    char postfix[MAX];
    infixToPostfix(infix, postfix); 

    reverse(postfix); 
    strcpy(prefix, postfix); 
}

int evaluatePostfix(char *expression) 
{
    int evalStack[MAX];
    int evalTop = -1;

    for (int i = 0; expression[i]; i++)
 {
        if (expression[i] >= '0' && expression[i] <= '9')
 {
            evalStack[++evalTop] = expression[i] - '0';
        } 
else 
{
            // Pop two operands from the stack
            int operand2 = evalStack[evalTop--];
            int operand1 = evalStack[evalTop--];
            int result = 0;

            switch (expression[i])
 {
                case '+':
                    result = operand1 + operand2;
                    break;
                case '-':
                    result = operand1 - operand2;
                    break;
                case '*':
                    result = operand1 * operand2;
                    break;
                case '/':
                    result = operand1 / operand2;
                    break;
                case '^':
                    result = 1;
                    for (int j = 0; j < operand2; j++)
 {
                        result *= operand1;
                    }
                    break;
                default:
                    printf("Invalid operator: %c\n", expression[i]);
                    exit(1);
            }
            evalStack[++evalTop] = result;
        }
    }
    return evalStack[evalTop];
}

int main() 
{
    char infix[20], postfix[20], prefix[20];

    printf("Enter Infix: ");
    scanf("%s", infix);

    int choice, value;
    do
    {
    printf("Enter choice (1 for postfix, 2 for prefix, 3 for evaluation, 4 for Exit): ");
    scanf("%d", &choice);

    switch (choice) {
        case 1:
            infixToPostfix(infix, postfix);
            printf("Postfix: %s\n", postfix);
            break;

        case 2:
            infixToPrefix(infix, prefix);
            printf("Prefix expression: %s\n", prefix);
            break;

        case 3:
            infixToPostfix(infix, postfix); 
            value = evaluatePostfix(postfix);
            printf("The result of the postfix expression is: %d\n", value);
            break;

            case 4:
            printf("Exit !!!");
            return 0;
            break;

        default:
            printf("Invalid choice!\n");
            break;
    }
    }while(choice!=4);

    return 0;
}
