#include <stdio.h>
#include <stdlib.h>

#define SIZE 10  // Define the size of the hash table

// Node for chaining
struct Node {
    int data;
    struct Node* next;
};

// Hash table arrays
struct Node* chainTable[SIZE];  // Hash table with chaining
int openAddressingTable[SIZE];  // Hash table with open addressing

// Hash function (simple modulo-based)
int hashFunction(int value) {
    return value % SIZE;
}

// Secondary hash function for double hashing
int secondHashFunction(int value) {
    return 7 - (value % 7);  // This is used for double hashing
}

// Chaining methods
void insertChaining(int value) {
    int index = hashFunction(value);
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = chainTable[index];
    chainTable[index] = newNode;
}

void displayChaining() {
    for (int i = 0; i < SIZE; i++) {
        struct Node* temp = chainTable[i];
        printf("Index %d: ", i);
        while (temp) {
            printf("%d -> ", temp->data);
            temp = temp->next;
        }
        printf("NULL\n");
    }
}

// Open Addressing methods

// Linear Probing
void insertLinearProbing(int value) {
    int index = hashFunction(value);
    while (openAddressingTable[index] != 0) {
        index = (index + 1) % SIZE;  // Move to next slot (circular)
    }
    openAddressingTable[index] = value;
}

void displayLinearProbing() {
    for (int i = 0; i < SIZE; i++) {
        printf("Index %d: %d\n", i, openAddressingTable[i]);
    }
}

// Quadratic Probing
void insertQuadraticProbing(int value) {
    int index = hashFunction(value);
    for (int i = 0; i < SIZE; i++) {
        int newIndex = (index + i * i) % SIZE;
        if (openAddressingTable[newIndex] == 0) {
            openAddressingTable[newIndex] = value;
            return;
        }
    }
}

void displayQuadraticProbing() {
    for (int i = 0; i < SIZE; i++) {
        printf("Index %d: %d\n", i, openAddressingTable[i]);
    }
}

// Double Hashing
void insertDoubleHashing(int value) {
    int index = hashFunction(value);
    int stepSize = secondHashFunction(value);
    while (openAddressingTable[index] != 0) {
        index = (index + stepSize) % SIZE;
    }
    openAddressingTable[index] = value;
}

void displayDoubleHashing() {
    for (int i = 0; i < SIZE; i++) {
        printf("Index %d: %d\n", i, openAddressingTable[i]);
    }
}

// Main function
int main() {
    // Chaining
    printf("Chaining:\n");
    insertChaining(10);
    insertChaining(20);
    insertChaining(30);
    insertChaining(42);
    displayChaining();

    // Linear Probing
    printf("\nLinear Probing:\n");
    for (int i = 0; i < SIZE; i++) {
        openAddressingTable[i] = 0;  // Initialize the table
    }
    insertLinearProbing(10);
    insertLinearProbing(21);
    insertLinearProbing(30);
    insertLinearProbing(46);
    displayLinearProbing();

    // Quadratic Probing
    printf("\nQuadratic Probing:\n");
    for (int i = 0; i < SIZE; i++) {
        openAddressingTable[i] = 0; // Initialize the table
    }
    insertQuadraticProbing(12);
    insertQuadraticProbing(24);
    insertQuadraticProbing(34);
    insertQuadraticProbing(45);
    displayQuadraticProbing();  // Correct display function

    // Double Hashing
    printf("\nDouble Hashing:\n");
    for (int i = 0; i < SIZE; i++) {
        openAddressingTable[i] = 0; // Initialize the table
    }
    insertDoubleHashing(10);
    insertDoubleHashing(22);
    insertDoubleHashing(32);
    insertDoubleHashing(45);
    displayDoubleHashing();  // Correct display function

    return 0;
}
