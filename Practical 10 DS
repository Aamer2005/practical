#include <stdio.h>
#define MAX 10

int graph_matrix[MAX][MAX]; // Adjacency matrix
int graph_list[MAX][MAX];   // Array-based adjacency list
int list_size[MAX];         // Tracks the number of neighbors for each vertex

// Initialize the adjacency matrix to 0
void initialize_graph_matrix() {
    for (int i = 0; i < MAX; i++) {
        for (int j = 0; j < MAX; j++) {
            graph_matrix[i][j] = 0;
        }
    }
}

// Initialize the adjacency list to 0 and reset list sizes
void initialize_graph_list() {
    for (int i = 0; i < MAX; i++) {
        list_size[i] = 0;
    }
}

// Add edge to adjacency matrix
void add_edge_matrix(int u, int v) {
    graph_matrix[u][v] = 1;
    graph_matrix[v][u] = 1; // For undirected graph
}

// Add edge to adjacency list
void add_edge_list(int u, int v) {
    graph_list[u][list_size[u]++] = v;
    graph_list[v][list_size[v]++] = u;
}

// BFS using adjacency matrix
void bfs_matrix(int start, int vertices) {
    int visited[MAX] = {0}, to_visit[MAX], front = 0, rear = 0;

    printf("BFS with Matrix: ");
    to_visit[rear++] = start;
    visited[start] = 1;

    while (front < rear) {
        int curr = to_visit[front++];
        printf("%d ", curr);

        for (int i = 0; i < vertices; i++) {
            if (graph_matrix[curr][i] == 1 && !visited[i]) {
                to_visit[rear++] = i;
                visited[i] = 1;
            }
        }
    }
    printf("\n");
}

// BFS using adjacency list
void bfs_list(int start, int vertices) {
    int visited[MAX] = {0}, to_visit[MAX], front = 0, rear = 0;

    printf("BFS with List: ");
    to_visit[rear++] = start;
    visited[start] = 1;

    while (front < rear) {
        int curr = to_visit[front++];
        printf("%d ", curr);

        for (int i = 0; i < list_size[curr]; i++) {
            int neighbor = graph_list[curr][i];
            if (!visited[neighbor]) {
                to_visit[rear++] = neighbor;
                visited[neighbor] = 1;
            }
        }
    }
    printf("\n");
}

// DFS using adjacency matrix
void dfs_matrix(int start, int visited[], int vertices) {
    visited[start] = 1;
    printf("%d ", start);

    for (int i = 0; i < vertices; i++) {
        if (graph_matrix[start][i] == 1 && !visited[i]) {
            dfs_matrix(i, visited, vertices);
        }
    }
}

// DFS using adjacency list
void dfs_list(int start, int visited[]) {
    visited[start] = 1;
    printf("%d ", start);

    for (int i = 0; i < list_size[start]; i++) {
        int neighbor = graph_list[start][i];
        if (!visited[neighbor]) {
            dfs_list(neighbor, visited);
        }
    }
}

int main() {
    int vertices = 5, visited[MAX] = {0};

    // Initialize adjacency structures
    initialize_graph_matrix();
    initialize_graph_list();

    // Add edges to adjacency matrix
    add_edge_matrix(0, 1);
    add_edge_matrix(0, 2);
    add_edge_matrix(1, 3);
    add_edge_matrix(1, 4);

    printf("BFS with Matrix from node 0:\n");
    bfs_matrix(0, vertices);

    // Reset visited array for DFS
    for (int i = 0; i < vertices; i++) {
        visited[i] = 0;
    }

    printf("DFS with Matrix from node 0:\n");
    dfs_matrix(0, visited, vertices);
    printf("\n");

    // Reset adjacency list and visited array
    initialize_graph_list();
    for (int i = 0; i < vertices; i++) {
        visited[i] = 0;
    }

    // Add edges to adjacency list
    add_edge_list(0, 1);
    add_edge_list(0, 2);
    add_edge_list(1, 3);
    add_edge_list(1, 4);

    printf("BFS with List from node 0:\n");
    bfs_list(0, vertices);

    // Reset visited array for DFS
    for (int i = 0; i < vertices; i++) {
        visited[i] = 0;
    }

    printf("DFS with List from node 0:\n");
    dfs_list(0, visited);
    printf("\n");

    return 0;
}
